"""
Comprehensive test suite for the HSIMars class.

This module provides unit tests and non-regression tests for all functionality
of the HSIMars hyperspectral image processing class. Tests are organized into
logical groups and use descriptive names to clearly communicate their purpose.

All tests use stub/mock data generated by fixtures in conftest.py, ensuring
fast, isolated, and reproducible testing without requiring real CRISM data files.

Author: Riccardo Finotello <riccardo.finotello@cea.fr>
Maintainer: Riccardo Finotello <riccardo.finotello@cea.fr>

Contributors:
- Riccardo Finotello
"""

from pathlib import Path

import numpy as np
import pytest

from hsimars import HSIMars


class TestHSIMarsInitialization:
    """Test suite for HSIMars object initialization and file validation."""

    def test_initialization_raises_error_when_header_file_does_not_exist(
        self, nonexistent_file_path
    ):
        """Verify that FileNotFoundError is raised when header file path is invalid."""
        with pytest.raises(FileNotFoundError, match="header file"):
            HSIMars(hdr_path=str(nonexistent_file_path))

    def test_initialization_raises_error_when_annotation_file_does_not_exist(
        self, stub_hsi_files, nonexistent_file_path
    ):
        """Verify that FileNotFoundError is raised when annotation file path is invalid."""
        with pytest.raises(FileNotFoundError, match="annotation file"):
            HSIMars(
                hdr_path=str(stub_hsi_files.hdr_path),
                annotations=str(nonexistent_file_path),
            )

    def test_initialization_succeeds_with_valid_header_file_only(
        self, stub_hsi_no_annotations
    ):
        """Verify successful initialization with only header file (no annotations)."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        assert isinstance(hsi.hdr_path, Path)
        assert hsi.hdr_path == Path(str(stub_hsi_no_annotations.hdr_path))
        assert hsi.annotations is None

    def test_initialization_succeeds_with_header_and_annotation_files(
        self, stub_hsi_files
    ):
        """Verify successful initialization with both header and annotation files."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )
        assert isinstance(hsi.hdr_path, Path)
        assert hsi.hdr_path == Path(str(stub_hsi_files.hdr_path))
        assert isinstance(hsi.annotations, Path)
        assert hsi.annotations == Path(str(stub_hsi_files.annotations_path))

    def test_initialization_sets_cache_attributes_to_none(
        self, stub_hsi_no_annotations
    ):
        """Verify that cache attributes are initialized as None for lazy loading."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        assert hsi._raw is None
        assert hsi._img is None
        assert hsi._ann is None


class TestHSIMarsRawDataLoading:
    """Test suite for raw ENVI data file loading."""

    def test_get_raw_loads_envi_file_on_first_call(
        self, stub_hsi_no_annotations
    ):
        """Verify that get_raw() successfully loads ENVI file on first access."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        assert hsi._raw is None
        raw = hsi.get_raw()
        assert raw is not None
        assert hsi._raw is raw  # Verify caching

    def test_get_raw_returns_cached_data_on_subsequent_calls(
        self, stub_hsi_no_annotations
    ):
        """Verify that get_raw() returns cached data without reloading from disk."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        raw1 = hsi.get_raw()
        raw2 = hsi.get_raw()
        assert raw1 is raw2  # Same object reference indicates caching


class TestHSIMarsImageDataProcessing:
    """Test suite for hyperspectral image data loading and processing."""

    def test_get_img_returns_none_initially_then_caches_result(
        self, stub_hsi_no_annotations
    ):
        """Verify lazy loading: _img is None initially, then cached after first call."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        assert hsi._img is None
        img = hsi.get_img()
        assert img is not None
        assert hsi._img is img  # Verify caching

    def test_get_img_returns_namedtuple_with_expected_attributes(
        self, stub_hsi_no_annotations
    ):
        """Verify that get_img() returns a NamedTuple with all required attributes."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        img = hsi.get_img()

        # Check all expected attributes exist
        assert hasattr(img, "hsi")
        assert hasattr(img, "wavelength")
        assert hasattr(img, "shape")
        assert hasattr(img, "height")
        assert hasattr(img, "width")
        assert hasattr(img, "channels")
        assert hasattr(img, "dtype")

    def test_get_img_returns_correct_dimensions_for_test_dataset(
        self, stub_hsi_no_annotations, expected_stub_dimensions
    ):
        """Non-regression test: verify image dimensions match expected values."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        img = hsi.get_img()

        assert img.shape == (
            expected_stub_dimensions["height"],
            expected_stub_dimensions["width"],
            expected_stub_dimensions["channels"],
        )
        assert img.height == expected_stub_dimensions["height"]
        assert img.width == expected_stub_dimensions["width"]
        assert img.channels == expected_stub_dimensions["channels"]

    def test_get_img_wavelength_array_matches_channel_count(
        self, stub_hsi_no_annotations
    ):
        """Verify that wavelength array length matches the number of spectral channels."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        img = hsi.get_img()

        assert len(img.wavelength) == img.channels
        assert img.wavelength.shape == (img.channels,)

    def test_get_img_returns_float32_data_type(self, stub_hsi_no_annotations):
        """Verify that HSI data is returned as float32 for numerical processing."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        img = hsi.get_img()

        assert img.dtype == "float32"
        assert img.hsi.dtype == np.float32

    def test_get_img_array_has_correct_3d_shape(self, stub_hsi_no_annotations):
        """Verify that HSI array has 3D shape (height, width, channels)."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        img = hsi.get_img()

        assert img.hsi.ndim == 3
        assert img.hsi.shape == (img.height, img.width, img.channels)

    def test_get_img_wavelengths_are_positive_and_ordered(
        self, stub_hsi_no_annotations
    ):
        """Verify that wavelength values are positive and generally increasing."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        img = hsi.get_img()

        # All wavelengths should be positive
        assert np.all(img.wavelength > 0)
        # Wavelengths should be generally increasing (allowing for small variations)
        assert img.wavelength[0] < img.wavelength[-1]


class TestHSIMarsAnnotationLoading:
    """Test suite for ground truth annotation loading and processing."""

    def test_get_annotations_returns_none_when_no_annotations_provided(
        self, stub_hsi_no_annotations
    ):
        """Verify that get_annotations() returns None when initialized without annotations."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        ann = hsi.get_annotations()
        assert ann is None

    def test_get_annotations_loads_and_caches_annotation_data(
        self, stub_hsi_files
    ):
        """Verify lazy loading: annotations are None initially, then cached after first call."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )
        assert hsi._ann is None
        ann = hsi.get_annotations()
        assert ann is not None
        assert hsi._ann is ann  # Verify caching

    def test_get_annotations_returns_namedtuple_with_expected_attributes(
        self, stub_hsi_files
    ):
        """Verify that get_annotations() returns a NamedTuple with all required attributes."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )
        ann = hsi.get_annotations()

        # Check all expected attributes exist
        assert hasattr(ann, "labels")
        assert hasattr(ann, "shape")
        assert hasattr(ann, "height")
        assert hasattr(ann, "width")
        assert hasattr(ann, "dtype")

    def test_get_annotations_dimensions_match_image_dimensions(
        self, stub_hsi_files
    ):
        """Verify that annotation dimensions match processed image dimensions."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )
        img = hsi.get_img()
        ann = hsi.get_annotations()

        assert ann.shape == (img.height, img.width)
        assert ann.height == img.height
        assert ann.width == img.width

    def test_get_annotations_returns_uint8_data_type(self, stub_hsi_files):
        """Verify that annotation labels are returned as uint8 for memory efficiency."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )
        ann = hsi.get_annotations()

        assert ann.dtype == "uint8"
        assert ann.labels.dtype == np.uint8

    def test_get_annotations_array_is_2d(self, stub_hsi_files):
        """Verify that annotation label array is 2D (height, width)."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )
        ann = hsi.get_annotations()

        assert ann.labels.ndim == 2
        assert ann.labels.shape == (ann.height, ann.width)

    def test_get_annotations_contains_valid_label_values(self, stub_hsi_files):
        """Verify that annotation labels contain reasonable values (non-negative integers)."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )
        ann = hsi.get_annotations()

        # All labels should be non-negative
        assert np.all(ann.labels >= 0)
        # Labels should be discrete integer values
        unique_labels = np.unique(ann.labels)
        assert (
            len(unique_labels) > 0
        )  # At least one class (even if just background)


class TestHSIMarsDataMethod:
    """Test suite for the combined data() method."""

    def test_data_returns_tuple_of_image_and_annotation_data(
        self, stub_hsi_files
    ):
        """Verify that data() returns a tuple with both image and annotation data."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )
        result = hsi.data()

        assert isinstance(result, tuple)
        assert len(result) == 2

    def test_data_method_caches_both_image_and_annotation_data(
        self, stub_hsi_files
    ):
        """Verify that data() populates both _img and _ann caches."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )
        assert hsi._img is None
        assert hsi._ann is None

        img, ann = hsi.data()

        assert hsi._img is img
        assert hsi._ann is ann

    def test_data_method_returns_consistent_results_with_individual_getters(
        self, stub_hsi_files
    ):
        """Verify that data() returns same results as calling get_img() and get_annotations()."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )

        img_direct = hsi.get_img()
        ann_direct = hsi.get_annotations()

        # Reset cache
        hsi._img = None
        hsi._ann = None

        img_data, ann_data = hsi.data()

        # Compare critical attributes (can't compare objects directly due to caching)
        assert img_data.shape == img_direct.shape
        assert ann_data.shape == ann_direct.shape

    def test_data_method_with_image_only_returns_none_for_annotations(
        self, stub_hsi_no_annotations
    ):
        """Verify that data() returns None for annotations when none provided."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        img, ann = hsi.data()

        assert img is not None
        assert ann is None


class TestHSIMarsNonRegressionTests:
    """Non-regression tests to ensure consistent behavior across code changes."""

    def test_image_processing_produces_consistent_shape(
        self, stub_hsi_no_annotations, expected_stub_dimensions
    ):
        """Non-regression: verify that image processing produces expected shape."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        img = hsi.get_img()

        # These values should remain constant for the test dataset
        assert img.shape == (
            expected_stub_dimensions["height"],
            expected_stub_dimensions["width"],
            expected_stub_dimensions["channels"],
        )

    def test_wavelength_range_is_within_expected_bounds(
        self, stub_hsi_no_annotations
    ):
        """Non-regression: verify wavelength values are in expected range for CRISM."""
        hsi = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        img = hsi.get_img()

        # CRISM typically covers ~400-4000 nm range
        assert img.wavelength.min() >= 300  # Allow some margin
        assert img.wavelength.max() <= 5000  # Allow some margin

    def test_annotation_alignment_with_image_data(self, stub_hsi_files):
        """Non-regression: verify annotations are correctly aligned with image."""
        hsi = HSIMars(
            hdr_path=str(stub_hsi_files.hdr_path),
            annotations=str(stub_hsi_files.annotations_path),
        )
        img, ann = hsi.data()

        # Annotations should have same spatial dimensions as image
        assert ann.height == img.height
        assert ann.width == img.width

    def test_multiple_instantiations_produce_consistent_results(
        self, stub_hsi_no_annotations
    ):
        """Non-regression: verify that multiple object instantiations yield same results."""
        hsi1 = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))
        hsi2 = HSIMars(hdr_path=str(stub_hsi_no_annotations.hdr_path))

        img1 = hsi1.get_img()
        img2 = hsi2.get_img()

        assert img1.shape == img2.shape
        assert len(img1.wavelength) == len(img2.wavelength)
        assert np.allclose(img1.wavelength, img2.wavelength)
