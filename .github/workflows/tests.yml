name: Tests and Quality Checks

on:
    push:
        branches:
            - main
            - mars_data
    pull_request:
        branches:
            - main
            - mars_data

jobs:
    test:
        name: Test on Python ${{ matrix.python-version }}
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python-version: ["3.12", "3.13"]

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Install uv
              uses: astral-sh/setup-uv@v4
              with:
                  enable-cache: true
                  cache-dependency-glob: "uv.lock"

            - name: Install package with test dependencies
              run: |
                  uv sync --group test

            - name: Run tests with pytest
              run: |
                  uv run pytest tests/ -v --cov=src/hsimars --cov-report=term-missing --cov-report=xml

    lint:
        name: Code Quality Checks
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python 3.12
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Install uv
              uses: astral-sh/setup-uv@v4

            - name: Install package with dev dependencies
              run: |
                  uv sync --group dev

            - name: Check code formatting with ruff
              run: |
                  uv run ruff check src/ tests/
              continue-on-error: true

            - name: Check code style with ruff format
              run: |
                  uv run ruff format --check src/ tests/
              continue-on-error: true

    docs:
        name: Documentation Build Test
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python 3.12
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Install pandoc
              run: |
                  sudo apt-get update
                  sudo apt-get install -y pandoc

            - name: Install uv
              uses: astral-sh/setup-uv@v4

            - name: Install package with docs dependencies
              run: |
                  uv sync --group docs

            - name: Build Sphinx documentation
              run: |
                  cd docs
                  uv run sphinx-build -W -b html source build/html

            - name: Upload documentation artifacts
              uses: actions/upload-artifact@v4
              if: success()
              with:
                  name: documentation-html
                  path: docs/build/html/
                  retention-days: 7

    build:
        name: Build Distribution
        runs-on: ubuntu-latest
        needs: [test, lint, docs]

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python 3.12
              uses: actions/setup-python@v5
              with:
                  python-version: "3.12"

            - name: Install uv
              uses: astral-sh/setup-uv@v4

            - name: Install build dependencies
              run: |
                  uv sync --group build

            - name: Build package
              run: |
                  uv build

            - name: Check distribution
              run: |
                  uv run twine check dist/*
              continue-on-error: true

            - name: Upload distribution artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: distribution-packages
                  path: dist/
                  retention-days: 7

    status:
        name: All Checks Passed
        runs-on: ubuntu-latest
        needs: [test, lint, docs, build]
        if: always()

        steps:
            - name: Check all jobs status
              run: |
                  if [ "${{ needs.test.result }}" == "success" ] && \
                     [ "${{ needs.lint.result }}" == "success" ] && \
                     [ "${{ needs.docs.result }}" == "success" ] && \
                     [ "${{ needs.build.result }}" == "success" ]; then
                    echo "✅ All checks passed!"
                    exit 0
                  else
                    echo "❌ Some checks failed:"
                    echo "  - Tests: ${{ needs.test.result }}"
                    echo "  - Lint: ${{ needs.lint.result }}"
                    echo "  - Docs: ${{ needs.docs.result }}"
                    echo "  - Build: ${{ needs.build.result }}"
                    exit 1
                  fi
